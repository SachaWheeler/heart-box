/*
 * refences:
 * 
 * https://xantorohara.github.io/led-matrix-editor
 * 
 */

//We always have to include the library
#include "LedControl.h"
#include "binary.h";

/*
  LedControl
  pin 12 is connected to the DataIn
  pin 11 is connected to the CLK
  pin 10 is connected to LOAD
*/

LedControl display = LedControl(12, 11, 10, 1);
const int buttonPin = 5;

const byte BLANK[8] = { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000 };

// heart outline
const byte OUTLINE[][8] = {
     { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010, B00000000
  }, { B00000000, B00000000, B00000000, B00000000, B00000000, B00000010, B00000010, B00000000
  }, { B00000000, B00000000, B00000000, B00000000, B00000100, B00000010, B00000010, B00000000
  }, { B00000000, B00000000, B00000000, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00000000, B00000000, B00000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00000000, B00000010, B00000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00000100, B00000010, B00000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00001100, B00000010, B00000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00011100, B00000010, B00000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00011100, B00100010, B00000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00011100, B00100010, B01000010, B00000100, B00000100, B00000010, B00000010, B00000000
  }, { B00011100, B00100010, B01000010, B10000100, B00000100, B00000010, B00000010, B00000000
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B00000010, B00000010, B00000000
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00000010, B00000000
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00000000
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00010000
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011000
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00111110, B01100110, B11000100, B11000100, B01100110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11100100, B11100100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100
  }, { B00011100, B00100010, B01000010, B10000100, B10000100, B01000010, B00100010, B00011100

  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  }
};
const int OUTLINE_LEN = sizeof(OUTLINE) / 8;
const int OUTLINE_TYPE = 0;
const byte OUTLINE_SPLASH[8] = { B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000 };

// explosion
const byte EXPLOSION[][8] = {
     { B00000000, B00000000, B00000000, B00011000, B00011000, B00000000, B00000000, B00000000
  }, { B00000000, B00000000, B00011000, B00111100, B00111100, B00011000, B00000000, B00000000
  }, { B00000000, B00001000, B00011000, B01111100, B00111110, B00011000, B00010000, B00000000
  }, { B00001000, B01001010, B00111100, B11111100, B00111111, B00111100, B01010010, B00010000
  }, { B10011011, B11001010, B00111100, B11100101, B10100111, B00111100, B01010011, B11011001
  }, { B10111011, B11111110, B01000011, B11000011, B11000011, B11000010, B01111111, B11011101
  }, { B11111111, B11100111, B11000011, B10000001, B10000001, B11000011, B11100111, B11111111
  }, { B01100110, B10000001, B10000001, B00000000, B00000000, B10000001, B10000001, B01100110
  }, { B01000010, B10000001, B00000000, B00000000, B00000000, B00000000, B10000001, B01000010
  }, { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000
  }
};
const int EXPLOSION_LEN = sizeof(EXPLOSION) / 8;
const int EXPLOSION_TYPE = 1;
const byte EXPLOSION_SPLASH[8] = { B00000001, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000 };

const byte HEART[][8] = {
     { B00000000, B00000000, B00000000, B00110000, B00110000, B00000000, B00000000, B00000000
  }, { B00000000, B00000000, B00110000, B01111000, B01111000, B00110000, B00000000, B00000000
  }, { B00000000, B00110000, B01111000, B11111100, B11111100, B01111000, B00110000, B00000000
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00001110, B00011111, B00111111, B01111110, B01111110, B00111111, B00011111, B00001110
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00001110, B00011111, B00111111, B01111110, B01111110, B00111111, B00011111, B00001110
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00011100, B00111110, B01111110, B11111100, B11111100, B01111110, B00111110, B00011100
  }, { B00000000, B00110000, B01111000, B11111100, B11111100, B01111000, B00110000, B00000000
  }, { B00000000, B00000000, B00110000, B01111000, B01111000, B00110000, B00000000, B00000000
  }
};

const int HEART_LEN = sizeof(HEART) / 8;
const int HEART_TYPE = 2;
const byte HEART_SPLASH[8] = { B00000001, B00000001, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000 };

const byte MESSAGE[][8] = {
     { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001110,
  }, { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00001110, B00011110,
  }, { B00000000, B00000000, B00000000, B00000000, B00000000, B00001110, B00011110, B11110000,
  }, { B00000000, B00000000, B00000000, B00000000, B00001110, B00011110, B11110000, B11110000,
  }, { B00000000, B00000000, B00000000, B00001110, B00011110, B11110000, B11110000, B00011110,
  }, { B00000000, B00000000, B00001110, B00011110, B11110000, B11110000, B00011110, B00001110,
  }, { B00000000, B00001110, B00011110, B11110000, B11110000, B00011110, B00001110, B00000000,
  }, { B00001110, B00011110, B11110000, B11110000, B00011110, B00001110, B00000000, B01110000,
  }, { B00011110, B11110000, B11110000, B00011110, B00001110, B00000000, B01110000, B11111000,
  }, { B11110000, B11110000, B00011110, B00001110, B00000000, B01110000, B11111000, B10001000,
  }, { B11110000, B00011110, B00001110, B00000000, B01110000, B11111000, B10001000, B10001000,
  }, { B00011110, B00001110, B00000000, B01110000, B11111000, B10001000, B10001000, B11111000,
  }, { B00001110, B00000000, B01110000, B11111000, B10001000, B10001000, B11111000, B01110000,
  }, { B00000000, B01110000, B11111000, B10001000, B10001000, B11111000, B01110000, B00000000,
  }, { B01110000, B11111000, B10001000, B10001000, B11111000, B01110000, B00000000, B01111000,
  }, { B11111000, B10001000, B10001000, B11111000, B01110000, B00000000, B01111000, B11111000,
  }, { B10001000, B10001000, B11111000, B01110000, B00000000, B01111000, B11111000, B10000000,
  }, { B10001000, B11111000, B01110000, B00000000, B01111000, B11111000, B10000000, B10000000,
  }, { B11111000, B01110000, B00000000, B01111000, B11111000, B10000000, B10000000, B11111000,
  }, { B01110000, B00000000, B01111000, B11111000, B10000000, B10000000, B11111000, B11111000,
  }, { B00000000, B01111000, B11111000, B10000000, B10000000, B11111000, B11111000, B00000010,
  }, { B01111000, B11111000, B10000000, B10000000, B11111000, B11111000, B00000010, B00001110,
  }, { B11111000, B10000000, B10000000, B11111000, B11111000, B00000010, B00001110, B00000000,
  }, { B10000000, B10000000, B11111000, B11111000, B00000010, B00001110, B00000000, B11111000,
  }, { B10000000, B11111000, B11111000, B00000010, B00001110, B00000000, B11111000, B11111000,
  }, { B11111000, B11111000, B00000010, B00001110, B00000000, B11111000, B11111000, B00001000,
  }, { B11111000, B00000010, B00001110, B00000000, B11111000, B11111000, B00001000, B00001000,
  }, { B00000010, B00001110, B00000000, B11111000, B11111000, B00001000, B00001000, B00111000,
  }, { B00001110, B00000000, B11111000, B11111000, B00001000, B00001000, B00111000, B00110000,
  }, { B00000000, B11111000, B11111000, B00001000, B00001000, B00111000, B00110000, B00000000,
  }, { B11111000, B11111000, B00001000, B00001000, B00111000, B00110000, B00000000, B01110000,
  }, { B11111000, B00001000, B00001000, B00111000, B00110000, B00000000, B01110000, B11111000,
  }, { B00001000, B00001000, B00111000, B00110000, B00000000, B01110000, B11111000, B10101000,
  }, { B00001000, B00111000, B00110000, B00000000, B01110000, B11111000, B10101000, B10101000,
  }, { B00111000, B00110000, B00000000, B01110000, B11111000, B10101000, B10101000, B00111000,
  }, { B00110000, B00000000, B01110000, B11111000, B10101000, B10101000, B00111000, B00110000,
  }, { B00000000, B01110000, B11111000, B10101000, B10101000, B00111000, B00110000, B00000000,
  }, { B01110000, B11111000, B10101000, B10101000, B00111000, B00110000, B00000000, B00000000,
  }, { B11111000, B10101000, B10101000, B00111000, B00110000, B00000000, B00000000, B00000000,
  }, { B10101000, B10101000, B00111000, B00110000, B00000000, B00000000, B00000000, B11111110,
  }, { B10101000, B00111000, B00110000, B00000000, B00000000, B00000000, B11111110, B11111110,
  }, { B00111000, B00110000, B00000000, B00000000, B00000000, B11111110, B11111110, B10010000,
  }, { B00110000, B00000000, B00000000, B00000000, B11111110, B11111110, B10010000, B10010000,
  }, { B00000000, B00000000, B00000000, B11111110, B11111110, B10010000, B10010000, B11110000,
  }, { B00000000, B00000000, B11111110, B11111110, B10010000, B10010000, B11110000, B01100000,
  }, { B00000000, B11111110, B11111110, B10010000, B10010000, B11110000, B01100000, B00000000,
  }, { B11111110, B11111110, B10010000, B10010000, B11110000, B01100000, B00000000, B01110000,
  }, { B11111110, B10010000, B10010000, B11110000, B01100000, B00000000, B01110000, B11111000,
  }, { B10010000, B10010000, B11110000, B01100000, B00000000, B01110000, B11111000, B10101000,
  }, { B10010000, B11110000, B01100000, B00000000, B01110000, B11111000, B10101000, B10101000,
  }, { B11110000, B01100000, B00000000, B01110000, B11111000, B10101000, B10101000, B00111000,
  }, { B01100000, B00000000, B01110000, B11111000, B10101000, B10101000, B00111000, B00110000,
  }, { B00000000, B01110000, B11111000, B10101000, B10101000, B00111000, B00110000, B00000000,
  }, { B01110000, B11111000, B10101000, B10101000, B00111000, B00110000, B00000000, B01000000,
  }, { B11111000, B10101000, B10101000, B00111000, B00110000, B00000000, B01000000, B11101000,
  }, { B10101000, B10101000, B00111000, B00110000, B00000000, B01000000, B11101000, B10101000,
  }, { B10101000, B00111000, B00110000, B00000000, B01000000, B11101000, B10101000, B10101000,
  }, { B00111000, B00110000, B00000000, B01000000, B11101000, B10101000, B10101000, B11111000,
  }, { B00110000, B00000000, B01000000, B11101000, B10101000, B10101000, B11111000, B11110000,
  }, { B00000000, B01000000, B11101000, B10101000, B10101000, B11111000, B11110000, B00000000,
  }, { B01000000, B11101000, B10101000, B10101000, B11111000, B11110000, B00000000, B01111000,
  }, { B11101000, B10101000, B10101000, B11111000, B11110000, B00000000, B01111000, B11111000,
  }, { B10101000, B10101000, B11111000, B11110000, B00000000, B01111000, B11111000, B10000000,
  }, { B10101000, B11111000, B11110000, B00000000, B01111000, B11111000, B10000000, B10000000,
  }, { B11111000, B11110000, B00000000, B01111000, B11111000, B10000000, B10000000, B11111000,
  }, { B11110000, B00000000, B01111000, B11111000, B10000000, B10000000, B11111000, B11111000,
  }, { B00000000, B01111000, B11111000, B10000000, B10000000, B11111000, B11111000, B00000000,
  }, { B01111000, B11111000, B10000000, B10000000, B11111000, B11111000, B00000000, B00010000,
  }, { B11111000, B10000000, B10000000, B11111000, B11111000, B00000000, B00010000, B00010000,
  }, { B10000000, B10000000, B11111000, B11111000, B00000000, B00010000, B00010000, B11111100,
  }, { B10000000, B11111000, B11111000, B00000000, B00010000, B00010000, B11111100, B11111100,
  }, { B11111000, B11111000, B00000000, B00010000, B00010000, B11111100, B11111100, B00010000,
  }, { B11111000, B00000000, B00010000, B00010000, B11111100, B11111100, B00010000, B00010000,
  }, { B00000000, B00010000, B00010000, B11111100, B11111100, B00010000, B00010000, B00000000,
  }, { B00010000, B00010000, B11111100, B11111100, B00010000, B00010000, B00000000, B10000000,
  }, { B00010000, B11111100, B11111100, B00010000, B00010000, B00000000, B10000000, B11110100,
  }, { B11111100, B11111100, B00010000, B00010000, B00000000, B10000000, B11110100, B11110100,
  }, { B11111100, B00010000, B00010000, B00000000, B10000000, B11110100, B11110100, B10000000,
  }, { B00010000, B00010000, B00000000, B10000000, B11110100, B11110100, B10000000, B00000000,
  }, { B00010000, B00000000, B10000000, B11110100, B11110100, B10000000, B00000000, B00100000,
  }, { B00000000, B10000000, B11110100, B11110100, B10000000, B00000000, B00100000, B11111100,
  }, { B10000000, B11110100, B11110100, B10000000, B00000000, B00100000, B11111100, B11111110,
  }, { B11110100, B11110100, B10000000, B00000000, B00100000, B11111100, B11111110, B00100010,
  }, { B11110100, B10000000, B00000000, B00100000, B11111100, B11111110, B00100010, B00100110,
  }, { B10000000, B00000000, B00100000, B11111100, B11111110, B00100010, B00100110, B00000100,
  }, { B00000000, B00100000, B11111100, B11111110, B00100010, B00100110, B00000100, B00000000,
  }, { B00100000, B11111100, B11111110, B00100010, B00100110, B00000100, B00000000, B01111000,
  }, { B11111100, B11111110, B00100010, B00100110, B00000100, B00000000, B01111000, B11111000,
  }, { B11111110, B00100010, B00100110, B00000100, B00000000, B01111000, B11111000, B10000000,
  }, { B00100010, B00100110, B00000100, B00000000, B01111000, B11111000, B10000000, B10000000,
  }, { B00100110, B00000100, B00000000, B01111000, B11111000, B10000000, B10000000, B11111000,
  }, { B00000100, B00000000, B01111000, B11111000, B10000000, B10000000, B11111000, B11111000,
  }, { B00000000, B01111000, B11111000, B10000000, B10000000, B11111000, B11111000, B00000000,
  }, { B01111000, B11111000, B10000000, B10000000, B11111000, B11111000, B00000000, B11111110,
  }, { B11111000, B10000000, B10000000, B11111000, B11111000, B00000000, B11111110, B11111110,
  }, { B10000000, B10000000, B11111000, B11111000, B00000000, B11111110, B11111110, B00000000,
  }, { B10000000, B11111000, B11111000, B00000000, B11111110, B11111110, B00000000, B00000000,
  }, { B11111000, B11111000, B00000000, B11111110, B11111110, B00000000, B00000000, B00000000,
  }, { B11111000, B00000000, B11111110, B11111110, B00000000, B00000000, B00000000, B00000000,
  }, { B00000000, B11111110, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000,
  }, { B11111110, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  }, { B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  }, { B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
  }
};
const int MESSAGE_LEN = sizeof(MESSAGE) / 8;
const int MESSAGE_TYPE = 3;
const byte MESSAGE_SPLASH[8] = { B00000001, B00000001, B00000001, B00000001, B00000000, B00000000, B00000000, B00000000 };

void setup() {
  Serial.begin(9600);

  pinMode(buttonPin, INPUT);
  digitalWrite(buttonPin, HIGH); // enable pullup resistor

  display.clearDisplay(0);
  display.shutdown(0, false);
  display.setIntensity(0, 3); // fairly low power

}

void displayImage(const byte* image) {
  for (int i = 0; i < 8; i++) {
    display.setRow(0, i, image[i]);
  }
}

// animation variables
int animFrame = 0;
unsigned long animTime = 0;     // the last time we animated
unsigned long OUTLINE_DELAY = 100;
unsigned long HEART_DELAY = 260;
unsigned long EXPLOSION_DELAY = 260;
unsigned long MESSAGE_DELAY = 100;
unsigned long millisecs = 0;    // a millis() time-slice
unsigned long button_interval = 750;

// starting defaults
unsigned long animation_delay = HEART_DELAY;  // milliseconds between animation calls
int animation_len = HEART_LEN; // starting position
int hold_type = HEART_TYPE;
int limited = 1;
int repeat_count = 2;
int blank = 0;

// button timing variables
int firsttime = 1;
unsigned long startTime;
unsigned long pressTime;

void loop() {
  millisecs = millis();

  // read the state of the pushbutton value:
  int  buttonState = digitalRead(buttonPin);

  // check if the pushbutton is pressed. If it is, the buttonState is LOW:
  if (buttonState == LOW) {
    if (firsttime == 1) {
      startTime = millisecs;
      firsttime = 0;
    }

    pressTime = millisecs - startTime;
    if (pressTime > button_interval * MESSAGE_TYPE) {
      // 3 sec hold
      if (hold_type != MESSAGE_TYPE) displayImage(MESSAGE_SPLASH);
      hold_type = MESSAGE_TYPE; // 3;
      limited = 1;
      repeat_count = 1;
      animation_len = MESSAGE_LEN;
      animation_delay = MESSAGE_DELAY;
      Serial.println("message");

    } else if (pressTime > button_interval * HEART_TYPE) {
      // 2 sec hold
      if (hold_type != HEART_TYPE) displayImage(HEART_SPLASH);
      hold_type = HEART_TYPE; // 2;
      limited = 1;
      repeat_count = 3;
      animation_len = HEART_LEN;
      animation_delay = HEART_DELAY;
      Serial.println("beating heart");

    } else if (pressTime > button_interval * EXPLOSION_TYPE) {
      // 1 sec hold
      if (hold_type != EXPLOSION_TYPE) displayImage(EXPLOSION_SPLASH);
      hold_type = EXPLOSION_TYPE; // 1;
      limited = 1;
      repeat_count = 2;
      animation_len = EXPLOSION_LEN;
      animation_delay = EXPLOSION_DELAY;
      Serial.println("explosion");

    } else {
      // quick press: outline
      displayImage(OUTLINE_SPLASH);
      hold_type = OUTLINE_TYPE; // 0;
      limited = 1;
      repeat_count = 1;
      animation_len = OUTLINE_LEN;
      animation_delay = OUTLINE_DELAY;
      Serial.println("heart outline");
    }
    animFrame = 0;

  } else { // not pressed, or unpressed
    if (firsttime == 0)
      firsttime = 1;

    if ( animTime + animation_delay < millisecs ) {
      animTime = millisecs;

      // animate
      if (limited == 1 && repeat_count == 0){
        if (blank == 0) displayImage(BLANK);
        blank = 1;
        
      }else if (hold_type == OUTLINE_TYPE) {
        displayImage(OUTLINE[animFrame]);
        blank = 0;

      } else if (hold_type == EXPLOSION_TYPE) {
        displayImage(EXPLOSION[animFrame]);
        blank = 0;

      } else if (hold_type == HEART_TYPE) {
        displayImage(HEART[animFrame]);
        blank = 0;

      } else if (hold_type == MESSAGE_TYPE) {
        displayImage(MESSAGE[animFrame]);
        blank = 0;

      }
      if (++animFrame >= animation_len) {
        // repeat, or not
        if (limited > 0 and repeat_count > 0){
            repeat_count--;
        }
        animFrame = 0;
      }
    }
  }
}
